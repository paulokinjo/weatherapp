{"version":3,"sources":["common/store/components/componentTypes.js","common/store/components/actions/arrowControlActions.js","common/store/screen/screenTypes.js","common/store/screen/actions/loadingActions.js","weather/store/weatherTypes.js","weather/store/actions/weatherActions.js","common/components/AlertDialog.jsx","common/screens/styles/loadingScreen.styles.js","common/screens/LoadingScreen.jsx","scale/utils/constants.js","scale/components/ScaleRadioButtons.jsx","scale/utils/convertions.jsx","weather/components/charts/styles/weatherBarChart.styles.js","weather/components/charts/WeatherBarChart.jsx","weather/components/charts/styles/weatherBarCharList.styles.js","weather/components/charts/WeatherBarChartList.jsx","common/components/ArrowControl.jsx","common/utils/constants.js","weather/components/styles/weatherCard.styles.js","weather/components/WeatherCard.jsx","weather/components/WeatherCardsList.jsx","scale/store/components/scaleComponentTypes.js","weather/screens/styles/weatherInfoScreen.styles.js","weather/screens/WeatherInfoScreen.jsx","scale/store/components/actions/scaleComponentActions.js","App.js","common/store/components/actions/alertActions.js","common/store/components/reducers/alertReducer.js","common/store/components/reducers/arrowControlReducer.js","common/store/screen/reducers/loadingReducer.js","common/store/commonRootReducer.js","scale/store/components/reducers/scaleComponentReducer.js","scale/store/scaleRootReducer.js","weather/store/reducers/weatherReducer.js","weather/store/weatherRootReducer.js","store/index.js","index.js"],"names":["HIDE_NEXT_ARROW","SHOW_NEXT_ARROW","SHOW_PREV_ARROW","HIDE_PREV_ARROW","SET_TOTAL_CARDS","SET_ALERT","SET_CURRENT_CARD","SET_TOTAL_CARDS_TO_SHOW","hidePrevArrow","type","types","isVisible","setCurrentCard","cardNum","dispatch","selectCard","undefined","setTotalCardsToShow","totalCardsToShow","SET_LOADING","setLoading","isLoading","GET_WEATHER","FILTER_CARDS_BY_DATE","SELECT_CARD","SET_ERROR","filterCardsByDate","data","totalCards","cards","now","Date","dateKeys","map","d","dt_txt","currentDate","closestDate","Math","abs","getHours","closestIndex","i","length","getDate","distanceToNow","push","all","selected","getWeather","a","loadingActions","axios","get","concat","process","request","weatherData","list","arrowControlActions","error","message","AlertDialog","title","onClose","Alert","severity","AlertTitle","loadingScreenStyles","makeStyles","spinner","position","left","top","transform","LoadingScreen","classes","className","CircularProgress","CELSIUS","FAHRENHEIT","ScaleRadioButtons","onChange","RadioGroup","row","aria-label","name","defaultValue","Grid","item","container","xs","sm","FormControlLabel","value","control","Radio","color","label","labelPlacement","toFahrenheit","toFixed","toCelsius","getScale","scale","weatherBarChartStyles","root","textAlign","paper","width","backgroundColor","maxWidth","margin","transition","boxShadow","date","fontSize","temperature","fontWeight","WeatherBarChart","Paper","style","height","main","temp","toString","elevation","split","src","weather","icon","alt","weatherBarChartListStyles","marginTop","containerItem","marginLeft","WeatherBarChartList","useSelector","state","components","justify","spacing","direction","alignItems","dt","ArrowControl","props","onClick","customStyle","months","weatherCardStyles","padding","bullet","display","media","paddingTop","WeatherCard","info","onCardSelection","dateInfo","Card","isSelected","border","CardMedia","image","CardContent","Typography","gutterBottom","description","variant","component","align","feels_like","wind","speed","CardActions","Button","size","humidity","flex","textTransform","constants","getMonth","getFullYear","settings","nextArrow","prevArrow","infinite","swipeToSlide","focusOnSelect","adaptiveHeight","getNextArrow","getPrevArrow","slidesToShow","slidesToScroll","beforeChange","_","curr","responsive","breakpoint","id","right","WeatherCardsList","useDispatch","arrowControlState","common","arrowControls","SET_SCALE","weatherInfoScreenStyles","gridWeatherCardsList","gridWeatherBarChartList","minHeight","WeatherInfoScreen","reducer","useEffect","event","target","gridWeatherBarCharList","App","loading","loadingPage","alert","alertMessage","setError","initialState","alertReducer","action","currentCard","arrowControlReducer","isLastPage","loadingReducer","commonRootReducer","combineReducers","scaleReducer","scaleRootReducer","scaleComponentReducer","weatherReducer","cardsAll","allRelatedWeatherInfo","filter","weatherRootReducer","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abf1d13b.chunk.js","sourcesContent":["export const HIDE_NEXT_ARROW = 'HIDE_NEXT_ARROW';\r\nexport const SHOW_NEXT_ARROW = 'SHOW_NEXT_ARROW';\r\nexport const SHOW_PREV_ARROW = 'SHOW_PREV_ARROW';\r\nexport const HIDE_PREV_ARROW = 'HIDE_PREV_ARROW';\r\nexport const SET_TOTAL_CARDS = 'SET_TOTAL_CARDS';\r\nexport const SET_ALERT = 'SET_ALERT';\r\nexport const SET_CURRENT_CARD = 'SET_CURRENT_CARD';\r\nexport const SET_TOTAL_CARDS_TO_SHOW = 'SET_TOTAL_CARDS_TO_SHOW';\r\n","import * as types from '../componentTypes';\r\n\r\nimport { selectCard } from '../../../../weather/store/actions/weatherActions';\r\n\r\nexport const hideNextArrow = () => {\r\n  return {\r\n    type: types.HIDE_NEXT_ARROW,\r\n    isVisible: false,\r\n  };\r\n};\r\n\r\nexport const showNextArrow = () => {\r\n  return {\r\n    type: types.SHOW_NEXT_ARROW,\r\n    isVisible: true,\r\n  };\r\n};\r\n\r\nexport const hidePrevArrow = () => {\r\n  return {\r\n    type: types.HIDE_PREV_ARROW,\r\n    isVisible: false,\r\n  };\r\n};\r\n\r\nexport const showPrevArrow = () => {\r\n  return {\r\n    type: types.SHOW_PREV_ARROW,\r\n    isVisible: true,\r\n  };\r\n};\r\n\r\nexport const setCurrentCard = (cardNum) => {\r\n  return (dispatch) => {\r\n    if (cardNum > 0) {\r\n      dispatch(showPrevArrow());\r\n    } else {\r\n      dispatch(hidePrevArrow());\r\n    }\r\n\r\n    dispatch({\r\n      type: types.SET_CURRENT_CARD,\r\n      cardNum,\r\n    });\r\n\r\n    dispatch(selectCard(undefined));\r\n  };\r\n};\r\n\r\nexport const setTotalCards = (totalCards) => {\r\n  return {\r\n    type: types.SET_TOTAL_CARDS,\r\n    totalCards,\r\n  };\r\n};\r\n\r\nexport const setTotalCardsToShow = (totalCardsToShow) => {\r\n  return {\r\n    type: types.SET_TOTAL_CARDS_TO_SHOW,\r\n    totalCardsToShow,\r\n  };\r\n};\r\n","export const SET_LOADING = 'SET_LOADING';\r\n","import * as types from '../screenTypes';\r\n\r\nexport const setLoading = (isLoading) => {\r\n  return {\r\n    type: types.SET_LOADING,\r\n    isLoading,\r\n  };\r\n};\r\n","export const GET_WEATHER = 'GET_WEATHER';\r\nexport const FILTER_CARDS_BY_DATE = 'FILTER_CARDS_BY_DATE';\r\nexport const SELECT_CARD = 'SELECT_CARD';\r\nexport const SET_ERROR = 'SET_ERROR';\r\n","import * as arrowControlActions from '../../../common/store/components/actions/arrowControlActions';\r\nimport * as loadingActions from '../../../common/store/screen/actions/loadingActions';\r\n\r\nimport {\r\n  FILTER_CARDS_BY_DATE,\r\n  GET_WEATHER,\r\n  SELECT_CARD,\r\n  SET_ERROR,\r\n} from '../weatherTypes';\r\n\r\nimport { SET_ALERT } from '../../../common/store/components/componentTypes';\r\nimport axios from 'axios';\r\n\r\nexport const filterCardsByDate = (data) => {\r\n  return (dispatch) => {\r\n    const cards = [];\r\n    const now = new Date();\r\n\r\n    const dateKeys = data.map((d) => new Date(d.dt_txt));\r\n\r\n    let currentDate = dateKeys[0];\r\n    let closestDate = Math.abs(currentDate.getHours() - now.getHours());\r\n    let closestIndex = 0;\r\n\r\n    for (let i = 1; i < dateKeys.length; i++) {\r\n      if (dateKeys[i].getDate() === currentDate.getDate()) {\r\n        let distanceToNow = Math.abs(dateKeys[i].getHours() - now.getHours());\r\n\r\n        if (closestDate > distanceToNow) {\r\n          closestDate = distanceToNow;\r\n          closestIndex = i;\r\n        }\r\n      } else {\r\n        cards.push(data[closestIndex]);\r\n\r\n        currentDate = dateKeys[i];\r\n        closestDate = Math.abs(currentDate.getHours() - now.getHours());\r\n        closestIndex = i;\r\n      }\r\n    }\r\n\r\n    cards.push(data[closestIndex]);\r\n\r\n    dispatch(arrowControlActions.setTotalCards(cards.length));\r\n\r\n    dispatch({\r\n      type: FILTER_CARDS_BY_DATE,\r\n      cards: {\r\n        all: cards,\r\n        selected: [],\r\n      },\r\n    });\r\n  };\r\n};\r\n\r\nexport const selectCard = (selected) => {\r\n  return (dispatch) => {\r\n    dispatch({ type: SELECT_CARD, selected });\r\n  };\r\n};\r\n\r\nexport const getWeather = () => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch(loadingActions.setLoading(true));\r\n\r\n      const request = await axios.get(\r\n        'https://api.openweathermap.org/data/2.5/forecast?q='\r\n          .concat(process.env.REACT_APP_CITY)\r\n          .concat('&APPID=')\r\n          .concat(process.env.REACT_APP_API_KEY)\r\n          .concat('&cnt=40')\r\n      );\r\n\r\n      dispatch({ type: GET_WEATHER, weatherData: request.data.list });\r\n\r\n      dispatch(arrowControlActions.hidePrevArrow());\r\n      dispatch(arrowControlActions.showNextArrow());\r\n    } catch (error) {\r\n      dispatch({ type: SET_ERROR, error: error.message });\r\n      dispatch({ type: SET_ALERT, message: error.message });\r\n    } finally {\r\n      dispatch(loadingActions.setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\nexport const setError = (error) => {\r\n  return {\r\n    type: SET_ERROR,\r\n    error,\r\n  };\r\n};\r\n","import Alert from '@material-ui/lab/Alert';\r\nimport AlertTitle from '@material-ui/lab/AlertTitle';\r\nimport React from 'react';\r\n\r\nconst AlertDialog = ({ title, message, onClose }) => {\r\n  return (\r\n    <Alert severity=\"error\" onClose={onClose}>\r\n      <AlertTitle>{title}</AlertTitle>\r\n      {message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default AlertDialog;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst loadingScreenStyles = makeStyles({\r\n  spinner: {\r\n    position: 'absolute',\r\n    left: '50%',\r\n    top: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n  },\r\n});\r\n\r\nexport default loadingScreenStyles;\r\n","import CircularProgress from '@material-ui/core/CircularProgress';\r\nimport React from 'react';\r\nimport loadingScreenStyles from './styles/loadingScreen.styles';\r\n\r\nconst LoadingScreen = () => {\r\n  const classes = loadingScreenStyles();\r\n  return (\r\n    <div className={classes.spinner}>\r\n      <CircularProgress />\r\n      <p>Loading...</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingScreen;\r\n","export const CELSIUS = 'CELSIUS';\r\nexport const FAHRENHEIT = 'FAHRENHEIT';\r\n","import { CELSIUS, FAHRENHEIT } from '../utils/constants';\r\n\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport React from 'react';\r\n\r\nconst ScaleRadioButtons = ({ onChange }) => {\r\n  return (\r\n    <RadioGroup\r\n      row\r\n      aria-label=\"scales\"\r\n      name=\"scales\"\r\n      defaultValue={FAHRENHEIT}\r\n      onChange={onChange}\r\n    >\r\n      <Grid item container xs={12}>\r\n        <Grid item container xs={false} sm={2} />\r\n        <Grid item container xs={8} sm={6}>\r\n          <FormControlLabel\r\n            value={CELSIUS}\r\n            control={<Radio color=\"primary\" />}\r\n            label=\"Celsius\"\r\n            labelPlacement=\"end\"\r\n          />\r\n        </Grid>\r\n        <Grid item container xs={4} sm={2}>\r\n          <FormControlLabel\r\n            value={FAHRENHEIT}\r\n            control={<Radio color=\"primary\" />}\r\n            label=\"Fahrenheit\"\r\n            labelPlacement=\"end\"\r\n          />\r\n        </Grid>\r\n        <Grid item container xs={false} sm={2} />\r\n      </Grid>\r\n    </RadioGroup>\r\n  );\r\n};\r\n\r\nexport default ScaleRadioButtons;\r\n","import { CELSIUS } from './constants';\r\n\r\nconst toFahrenheit = (value) => (value * 1.8 - 459.67).toFixed(0);\r\n\r\nconst toCelsius = (value) => (value - 273.15).toFixed(0);\r\n\r\nexport const getScale = (value, scale) => {\r\n  if (scale === CELSIUS) {\r\n    return (\r\n      <>\r\n        {toCelsius(value)} <sup>&#8451;</sup>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {toFahrenheit(value)}\r\n      <sup>&#8457;</sup>\r\n    </>\r\n  );\r\n};\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst weatherBarChartStyles = makeStyles({\r\n  root: {\r\n    textAlign: 'center',\r\n  },\r\n  paper: {\r\n    width: '60px',\r\n    backgroundColor: 'aqua',\r\n    maxWidth: 100,\r\n    margin: 'auto',\r\n    transition: '0.3s',\r\n    boxShadow: '0 8px 40px -12px rgba(0,0,0,0.3)',\r\n    '&:hover': {\r\n      boxShadow: '0 16px 70px -12.125px rgba(0,0,0,0.3)',\r\n    },\r\n  },\r\n  date: { fontSize: '14px' },\r\n  temperature: { fontSize: '18px', fontWeight: 'bold' },\r\n});\r\n\r\nexport default weatherBarChartStyles;\r\n","import Paper from '@material-ui/core/Paper';\r\nimport React from 'react';\r\nimport { getScale } from '../../../scale/utils/convertions';\r\nimport weatherBarChartStyles from './styles/weatherBarChart.styles';\r\n\r\nconst WeatherBarChart = ({ weatherData, scale }) => {\r\n  const classes = weatherBarChartStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper\r\n        className={classes.paper}\r\n        style={{ height: (weatherData.main.temp / 3).toString().concat('px') }}\r\n        elevation={10}\r\n      >\r\n        <span className={classes.date}>{weatherData.dt_txt.split(' ')[1]}</span>\r\n        <img\r\n          src={`http://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`}\r\n          alt=\"weatherInfo\"\r\n          width=\"40\"\r\n        />\r\n        {weatherData.weather[0].main}\r\n      </Paper>\r\n      <span className={classes.temperature}>\r\n        {getScale(weatherData.main.temp, scale)}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherBarChart;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst weatherBarChartListStyles = makeStyles({\r\n  root: { marginTop: '20px' },\r\n  containerItem: { marginLeft: 15 },\r\n});\r\n\r\nexport default weatherBarChartListStyles;\r\n","import Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\nimport WeatherBarChart from './WeatherBarChart';\r\nimport { useSelector } from 'react-redux';\r\nimport weatherBarChartListStyles from './styles/weatherBarCharList.styles';\r\n\r\nconst WeatherBarChartList = ({ weatherData }) => {\r\n  const scale = useSelector((state) => state.scale.components);\r\n  const classes = weatherBarChartListStyles();\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        item\r\n        container\r\n        justify=\"center\"\r\n        spacing={2}\r\n        direction=\"row\"\r\n        alignItems=\"flex-end\"\r\n        className={classes.root}\r\n      >\r\n        {weatherData.map((data) => (\r\n          <Grid\r\n            key={data.dt}\r\n            item\r\n            xs={3}\r\n            sm={1}\r\n            className={classes.containerItem}\r\n          >\r\n            <WeatherBarChart weatherData={data} scale={scale} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherBarChartList;\r\n","import ForwardIcon from '@material-ui/icons/Forward';\r\n\r\nconst ArrowControl = (props) => {\r\n  const defaultStyle = { fontSize: 70, color: 'blue' };\r\n  const { className, style, onClick, customStyle, isVisible } = props;\r\n\r\n  return (\r\n    <>\r\n      {isVisible && (\r\n        <ForwardIcon\r\n          className={className}\r\n          style={{ ...style, ...defaultStyle, ...customStyle }}\r\n          onClick={onClick}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ArrowControl;\r\n","export const months = [\r\n  'Jan',\r\n  'Feb',\r\n  'Mar',\r\n  'Apr',\r\n  'May',\r\n  'Jun',\r\n  'Jul',\r\n  'Aug',\r\n  'Sep',\r\n  'Oct',\r\n  'Nov',\r\n  'Dec',\r\n];\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst weatherCardStyles = makeStyles({\r\n  root: {\r\n    margin: '10px',\r\n    padding: '10px',\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  media: {\r\n    paddingTop: '46.25%',\r\n  },\r\n});\r\n\r\nexport default weatherCardStyles;\r\n","import * as constants from '../../common/utils/constants';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport OpacityIcon from '@material-ui/icons/Opacity';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { getScale } from '../../scale/utils/convertions';\r\nimport weatherCardStyles from './styles/weatherCard.styles';\r\n\r\nconst WeatherCard = ({ info, scale, onCardSelection }) => {\r\n  const classes = weatherCardStyles();\r\n  const dateInfo = new Date(info.dt_txt);\r\n\r\n  return (\r\n    <Card\r\n      className={classes.root}\r\n      onClick={onCardSelection}\r\n      style={\r\n        info?.isSelected\r\n          ? {\r\n              border: '2px solid rgb(86, 180, 239)',\r\n              boxShadow:\r\n                '0px 1px 3px rgba(0, 0, 0, 0.05) inset, 0px 0px 8px rgba(82, 168, 236, 0.6)',\r\n            }\r\n          : {}\r\n      }\r\n    >\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={`http://openweathermap.org/img/wn/${info.weather[0].icon}@2x.png`}\r\n      />\r\n      <CardContent>\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"textSecondary\"\r\n          gutterBottom\r\n        >\r\n          {info.weather[0].main} ({info.weather[0].description})\r\n        </Typography>\r\n        <Typography variant=\"h3\" component=\"h5\" align=\"center\">\r\n          {getScale(info.main.temp, scale)}\r\n          <hr />\r\n        </Typography>\r\n        <Typography variant=\"body2\" align=\"center\" color=\"secondary\">\r\n          Feels like: {getScale(info.main.feels_like, scale)}\r\n          <br />\r\n          <span>Wind {info.wind.speed} m/s</span>\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button size=\"small\">\r\n          <OpacityIcon color=\"primary\" /> {info.main.humidity}%\r\n        </Button>\r\n        <Button size=\"large\" style={{ flex: 1, textTransform: 'capitalize' }}>\r\n          {dateInfo.getDate()} {constants.months[dateInfo.getMonth()]}{' '}\r\n          {dateInfo.getFullYear()}\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import {\r\n  setCurrentCard,\r\n  setTotalCardsToShow,\r\n} from '../../common/store/components/actions/arrowControlActions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport ArrowControl from '../../common/components/ArrowControl';\r\nimport React from 'react';\r\nimport Slider from 'react-slick';\r\nimport WeatherCard from './WeatherCard';\r\nimport { selectCard } from '../store/actions/weatherActions';\r\n\r\nconst WeatherCardsList = ({ weatherData }) => {\r\n  const dispatch = useDispatch();\r\n  const arrowControlState = useSelector((state) => state.common.arrowControls);\r\n  const scale = useSelector((state) => state.scale.components);\r\n\r\n  const handleCardSelection = (selectedCard) => {\r\n    dispatch(selectCard(selectedCard));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {arrowControlState && (\r\n        <Slider\r\n          {...settings(\r\n            dispatch,\r\n            arrowControlState.nextArrow,\r\n            arrowControlState.prevArrow\r\n          )}\r\n        >\r\n          {weatherData.map((data) => (\r\n            <div key={data.dt}>\r\n              <WeatherCard\r\n                info={data}\r\n                scale={scale}\r\n                onCardSelection={() => handleCardSelection(data)}\r\n              />\r\n            </div>\r\n          ))}\r\n        </Slider>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst settings = (dispatch, nextArrow, prevArrow) => {\r\n  return {\r\n    infinite: false,\r\n    speed: 300,\r\n    swipeToSlide: true,\r\n    focusOnSelect: false,\r\n    adaptiveHeight: true,\r\n    nextArrow: getNextArrow(nextArrow),\r\n    prevArrow: getPrevArrow(prevArrow),\r\n    slidesToShow: 3,\r\n    slidesToScroll: 1,\r\n    beforeChange: (_, curr) => {\r\n      dispatch(setTotalCardsToShow(3));\r\n      dispatch(setCurrentCard(curr));\r\n    },\r\n    responsive: [\r\n      {\r\n        breakpoint: 600,\r\n        settings: {\r\n          slidesToShow: 2,\r\n          beforeChange: (_, curr) => {\r\n            dispatch(setTotalCardsToShow(2));\r\n            dispatch(setCurrentCard(curr));\r\n          },\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 480,\r\n        settings: {\r\n          slidesToShow: 1,\r\n          beforeChange: (_, curr) => {\r\n            dispatch(setTotalCardsToShow(1));\r\n            dispatch(setCurrentCard(curr));\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n};\r\n\r\nconst getPrevArrow = (prevArrow) => {\r\n  return (\r\n    <ArrowControl\r\n      customStyle={{ top: '-83px', left: '18%', transform: 'rotate(180deg)' }}\r\n      isVisible={prevArrow}\r\n      id=\"prevArrow\"\r\n    />\r\n  );\r\n};\r\n\r\nconst getNextArrow = (nextArrow) => {\r\n  return (\r\n    <ArrowControl\r\n      customStyle={{\r\n        top: '-80px',\r\n        right: '25%',\r\n        transform: 'rotate(360deg)',\r\n      }}\r\n      isVisible={nextArrow}\r\n      id=\"nextArrow\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default WeatherCardsList;\r\n","export const SET_SCALE = 'SET_SCALE';\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst weatherInfoScreenStyles = makeStyles({\r\n  main: { marginTop: '10px' },\r\n  gridWeatherCardsList: { marginTop: '30px' },\r\n  gridWeatherBarChartList: { minHeight: 250, marginTop: -25 },\r\n});\r\n\r\nexport default weatherInfoScreenStyles;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ScaleRadioButtons from '../../scale/components/ScaleRadioButtons';\r\nimport WeatherBarChartList from '../components/charts/WeatherBarChartList';\r\nimport WeatherCardsList from '../components/WeatherCardsList';\r\nimport { filterCardsByDate } from '../store/actions/weatherActions';\r\nimport { setScale } from '../../scale/store/components/actions/scaleComponentActions';\r\nimport weatherInfoScreenStyles from './styles/weatherInfoScreen.styles';\r\n\r\nconst WeatherInfoScreen = () => {\r\n  const dispatch = useDispatch();\r\n  const weather = useSelector((state) => state.weather.reducer);\r\n  const classes = weatherInfoScreenStyles();\r\n\r\n  useEffect(() => {\r\n    if (weather?.data?.length) dispatch(filterCardsByDate(weather.data));\r\n  }, [dispatch, weather.data]);\r\n\r\n  const handleScaleChange = (event) => {\r\n    dispatch(setScale(event.target.value));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container justify=\"center\" direction=\"row\">\r\n        <Grid item xs={false} sm={2} />\r\n        <Grid\r\n          item\r\n          container\r\n          xs={12}\r\n          sm={8}\r\n          direction=\"column\"\r\n          spacing={10}\r\n          className={classes.main}\r\n        >\r\n          <Grid item xs={12}>\r\n            {weather?.data?.length && (\r\n              <ScaleRadioButtons onChange={handleScaleChange} />\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.gridWeatherCardsList}>\r\n            {weather && <WeatherCardsList weatherData={weather.cards.all} />}\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.gridWeatherBarCharList}>\r\n            {weather && (\r\n              <WeatherBarChartList weatherData={weather.cards.selected} />\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={false} sm={2} />\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherInfoScreen;\r\n","import * as types from '../scaleComponentTypes';\r\n\r\nexport const setScale = (scale) => {\r\n  return {\r\n    type: types.SET_SCALE,\r\n    scale,\r\n  };\r\n};\r\n","import { getWeather, setError } from './weather/store/actions/weatherActions';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport AlertDialog from './common/components/AlertDialog';\nimport LoadingScreen from './common/screens/LoadingScreen';\nimport WeatherInfoScreen from './weather/screens/WeatherInfoScreen';\nimport { setAlert } from './common/store/components/actions/alertActions';\nimport { useEffect } from 'react';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector((state) => state.common.loadingPage);\n  const alert = useSelector((state) => state.common.alertMessage);\n  const error = useSelector((state) => state.weather.error);\n\n  useEffect(() => {\n    dispatch(getWeather());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      {loading || alert?.message ? <LoadingScreen /> : <WeatherInfoScreen />}\n      {alert?.message && (\n        <AlertDialog\n          title={alert.title}\n          message={alert.message}\n          onClose={() => {\n            dispatch(setAlert(''));\n            dispatch(getWeather());\n          }}\n        />\n      )}\n\n      {error && (\n        <AlertDialog\n          title=\"Error\"\n          message={error}\n          onClose={() => dispatch(setError(''))}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { SET_ALERT } from '../componentTypes';\r\n\r\nexport const setAlert = (message) => {\r\n  return {\r\n    type: SET_ALERT,\r\n    message,\r\n  };\r\n};\r\n","import { SET_ALERT } from '../componentTypes';\r\n\r\nconst initialState = {\r\n  title: 'Error',\r\n  message: '',\r\n};\r\n\r\nconst alertReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_ALERT:\r\n      return {\r\n        ...state,\r\n        message: action.message,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default alertReducer;\r\n","import * as types from '../componentTypes';\r\n\r\nconst initialState = {\r\n  prevArrow: false,\r\n  nextArrow: true,\r\n  currentCard: 1,\r\n  totalCards: 5,\r\n  totalCardsToShow: 3,\r\n};\r\n\r\nconst arrowControlReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.HIDE_NEXT_ARROW:\r\n      return {\r\n        ...state,\r\n        nextArrow: action.isVisible,\r\n      };\r\n\r\n    case types.SHOW_NEXT_ARROW:\r\n      return {\r\n        ...state,\r\n        nextArrow: action.isVisible,\r\n      };\r\n\r\n    case types.HIDE_PREV_ARROW:\r\n      return {\r\n        ...state,\r\n        prevArrow: action.isVisible,\r\n      };\r\n\r\n    case types.SHOW_PREV_ARROW:\r\n      return {\r\n        ...state,\r\n        prevArrow: action.isVisible,\r\n      };\r\n\r\n    case types.SET_CURRENT_CARD:\r\n      const isLastPage =\r\n        action.cardNum + state.totalCardsToShow >= state.totalCards;\r\n      return {\r\n        ...state,\r\n        currentCard: action.cardNum,\r\n        nextArrow: !isLastPage,\r\n      };\r\n\r\n    case types.SET_TOTAL_CARDS: {\r\n      return {\r\n        ...state,\r\n        totalCards: action.totalCards,\r\n      };\r\n    }\r\n\r\n    case types.SET_TOTAL_CARDS_TO_SHOW: {\r\n      return {\r\n        ...state,\r\n        totalCardsToShow: action.totalCardsToShow,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default arrowControlReducer;\r\n","import * as types from '../screenTypes';\r\n\r\nconst loadingReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case types.SET_LOADING:\r\n      return action.isLoading;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default loadingReducer;\r\n","import alertReducer from './components/reducers/alertReducer';\r\nimport arrowControlReducer from './components/reducers/arrowControlReducer';\r\nimport { combineReducers } from 'redux';\r\nimport loadingReducer from './screen/reducers/loadingReducer';\r\n\r\nconst commonRootReducer = combineReducers({\r\n  arrowControls: arrowControlReducer,\r\n  loadingPage: loadingReducer,\r\n  alertMessage: alertReducer,\r\n});\r\n\r\nexport default commonRootReducer;\r\n","import * as types from '../scaleComponentTypes';\r\n\r\nimport { FAHRENHEIT } from '../../../utils/constants';\r\n\r\nconst scaleReducer = (state = FAHRENHEIT, action) => {\r\n  switch (action.type) {\r\n    case types.SET_SCALE:\r\n      return action.scale;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default scaleReducer;\r\n","import { combineReducers } from 'redux';\r\nimport scaleComponentReducer from './components/reducers/scaleComponentReducer';\r\n\r\nconst scaleRootReducer = combineReducers({\r\n  components: scaleComponentReducer,\r\n});\r\n\r\nexport default scaleRootReducer;\r\n","import * as types from '../weatherTypes';\r\n\r\nconst initialState = {\r\n  data: [],\r\n  cards: {\r\n    all: [],\r\n    selected: [],\r\n  },\r\n  error: '',\r\n};\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.GET_WEATHER:\r\n      return {\r\n        ...state,\r\n        data: action.weatherData,\r\n      };\r\n\r\n    case types.FILTER_CARDS_BY_DATE: {\r\n      return {\r\n        ...state,\r\n        cards: action.cards,\r\n      };\r\n    }\r\n\r\n    case types.SELECT_CARD: {\r\n      const cardsAll = state.cards.all;\r\n      for (let i = 0; i < cardsAll.length; i++) {\r\n        cardsAll[i].isSelected = false;\r\n        if (cardsAll[i].dt === action.selected?.dt) {\r\n          cardsAll[i].isSelected = true;\r\n        }\r\n      }\r\n\r\n      const allRelatedWeatherInfo = state.data.filter(\r\n        (data) =>\r\n          new Date(data.dt_txt).getDate() ===\r\n          new Date(action.selected?.dt_txt).getDate()\r\n      );\r\n      const cards = { ...state.cards, selected: allRelatedWeatherInfo };\r\n\r\n      return {\r\n        ...state,\r\n        cards,\r\n      };\r\n    }\r\n\r\n    case types.SET_ERROR: {\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default weatherReducer;\r\n","import { combineReducers } from 'redux';\r\nimport weatherReducer from './reducers/weatherReducer';\r\n\r\nconst weatherRootReducer = combineReducers({\r\n  reducer: weatherReducer,\r\n});\r\n\r\nexport default weatherRootReducer;\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\n\r\nimport commonRootReducer from '../common/store/commonRootReducer';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport scaleRootReducer from '../scale/store/scaleRootReducer';\r\nimport thunk from 'redux-thunk';\r\nimport weatherRootReducer from '../weather/store/weatherRootReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  weather: weatherRootReducer,\r\n  common: commonRootReducer,\r\n  scale: scaleRootReducer,\r\n});\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import App from './App';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport store from './store';\n\nrender(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}